package utils;

import com.complexible.stardog.api.ConnectionConfiguration;
import com.complexible.stardog.rdf4j.StardogRepository;
import org.eclipse.rdf4j.query.GraphQuery;
import org.eclipse.rdf4j.query.GraphQueryResult;
import org.eclipse.rdf4j.query.QueryResults;
import org.eclipse.rdf4j.repository.Repository;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryException;
import org.eclipse.rdf4j.rio.RDFFormat;
import org.eclipse.rdf4j.rio.RDFWriter;
import org.eclipse.rdf4j.rio.Rio;

import java.io.StringWriter;

/**
 * Simple interface to the Stardog repository.
 * This class allows a connection to be initialized,
 * and provides methods to run various queries
 * @author Bonnie MacKellar
 *
 */
public class RepositoryMgr {

    private static Repository repo;
    private static RepositoryConnection conn;


    /**
     * This creates the connection to the database
     * @param url URL for Stardog repository
     * @param dbName  the name of the database
     * @param login
     * @param password
     */
    public void init(String url, String dbName, String login, String password) {
        System.out.println("Connecting to " + url);
        try {
            repo = new StardogRepository(ConnectionConfiguration
                    .to(dbName)
                    .server(url)
                    .credentials(login, password));

            repo.initialize();

        } catch (RepositoryException e) {
            if (repo != null)
                repo.shutDown();
            e.printStackTrace();

        }
    }

    /**
     * This returns a list of trial identifiers (NCTID's) for trials
     * that contain an intervention name that matches the parameter
     * @param intName  name of an intervention
     * @return  JSON-LD formatted string
     */
    public String getTrialIdsByInterventionName(String intName) {
        conn = repo.getConnection();
        GraphQuery gQuery = conn.prepareGraphQuery("construct {?nct ct:hasNCT ?nctid}"
                + "where {?nct ct:hasNCT ?nctid."
                + "?nct ct:hasIntervention ?int."
                + "?int ct:hasName \"" + intName + "\".}");

        GraphQueryResult results = gQuery.evaluate();
        return formatResults(results);
    }

    /**
     * This returns a clinical trial whose nctid matches the value in the parameter
     * Currently, the returned clinical trial information consists of the nct id,
     * a list of interventions (name and type), and a list of eligibility criteria, text only
     * The UMLS concepts and criteria classifications generated in the UIMA pipeline
     * are not currently returned.
     * @param nctid
     * @return
     */
    public String getTrialByNctID(String nctid) {
        conn = repo.getConnection();
        GraphQuery gQuery = conn.prepareGraphQuery("construct where { ?t ct:hasNCT \"" + nctid + "\"."
                + "?t ct:hasIntervention ?int."
                + "?int ct:hasName ?intName."
                + "?int ct:hasType ?intType."
                + "?t ct:hasEligCrit ?crit. "
                + "?crit ct:criteriaText ?text.}");

        GraphQueryResult results = gQuery.evaluate();
        return formatResults(results);

    }


    /**
     * This returns the conflicts generated by the trial whose nctid matches the parameter value
     * For each conflict, it returns the conflict resource name, the nctid of the conflicting trial,
     * the UMLS concept id, the phrase in the criterion and the phrase in the intervention that matched,
     * and the full text of the criterion.
     * @param nctid
     * @return
     */
    public String getConflictsByNctID(String nctid) {
        conn = repo.getConnection();
        GraphQuery gQuery = conn.prepareGraphQuery("construct where { ?trial ct:hasNCT \"" + nctid + "\"."
                + "?trial ct:hasConflict ?conflict."
                + "?conflict ct:hasConflictNCT ?nctid."
                + "?conflict ct:hasConflictCui ?cui."
                + "?conflict ct:hasIntCoveredText ?icov."
                + "?conflict ct:hasCriteriaCoveredText ?ccov."
                + "?conflict ct:hasCriterion ?crit.}");


        GraphQueryResult results = gQuery.evaluate();
        return formatResults(results);

    }




    private String formatResults(GraphQueryResult results) {
        StringWriter strWriter = new StringWriter();
        String resultsStr="";
        RDFWriter rdfWriter = Rio.createWriter(RDFFormat.JSONLD, strWriter);
        Rio.write(QueryResults.asModel(results), rdfWriter);
        resultsStr = strWriter.toString();
        return resultsStr;
    }


    public void close() {
        conn.close();
        repo.shutDown();
    }



}